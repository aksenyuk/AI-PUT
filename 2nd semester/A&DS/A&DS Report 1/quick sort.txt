#include <stdio.h>
#include <stdlib.h>
#include <time.h>

                                                               // Function to partition the array on the basis of pivot element
int partition(int array[], int low, int high) {

                                                                    // Select the pivot element
  int pivot = array[high];
  int i = (low - 1);

                                                                           // Put the elements smaller than pivot on the left
                                                                          // and greater than pivot on the right of pivot
  for (int j = low; j < high; j++) {
    if (array[j] <= pivot) {
      i++;
      int temp = array[i];
      array[i] = array[j];
      array[j] = temp;
    }
  }
    int temp = array[i + 1];
    array[i + 1] = array[high];
    array[high] = temp;
  return (i + 1);
}

void quickSort(int array[], int low, int high) {
  if (low < high) {

                                                            // Select pivot position and put all the elements smaller
                                                         // than pivot on left and greater than pivot on right
    int pi = partition(array, low, high);

                                                    // Sort the elements on the left of pivot
    quickSort(array, low, pi - 1);

                                           // Sort the elements on the right of pivot
    quickSort(array, pi + 1, high);
  }
}



int main(){
  int len;
  scanf("%d", &len);

  int randArray[len], i;
  for(i = 0; i < len; i++)
        randArray[i] = rand()%len;

  clock_t tic = clock();
  quickSort(randArray, 0, len-1);
  clock_t toc = clock();
  printf("Execution time: %f seconds\n", (double)(toc - tic) / CLOCKS_PER_SEC);

  for(i = 0; i < len; i++)
        printf("%d ", randArray[i]);
  return 0;
}